name: Release
on:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build Cache Docker Image
        run: docker build --file Dockerfile --build-arg SKIP_TESTS=true --tag desmos-api .
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info
  release-local:
    name: release-local
    runs-on: ubuntu-latest
    needs: build
    if: success()
    environment: local
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew
      - name: Build and Push docker image
        run: |
          ./gradlew printVersion
          ./gradlew printProjectName
          VERSION=$(./gradlew -q printVersion)
          PROJECT_NAME=$(./gradlew -q printProjectName)
          IMAGE_TAG="$PROJECT_NAME:v$VERSION$SUFFIX"
          docker build --file Dockerfile --build-arg SKIP_TESTS=true --tag $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_HUB_CLIENT_NAME: in2workspace
          SUFFIX: -snapshot
  release-dev:
    name: release-dev
    runs-on: ubuntu-latest
    needs:
     - build
     - release-local
    if: success()
    environment: dev
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew
      - name: Build and Push docker image
        run: |
          ./gradlew printVersion
          ./gradlew printProjectName
          VERSION=$(./gradlew -q printVersion)
          PROJECT_NAME=$(./gradlew -q printProjectName)
          IMAGE_TAG="$PROJECT_NAME:v$VERSION$SUFFIX"
          docker build --file Dockerfile --build-arg SKIP_TESTS=true --tag $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_HUB_CLIENT_NAME: in2workspace
          SUFFIX: -snapshot
  release-test:
    name: release-test
    runs-on: ubuntu-latest
    needs:
      - build
      - release-dev
    if: success()
    environment: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew
      - name: Build and Push docker image
        run: |
          ./gradlew printVersion
          ./gradlew printProjectName
          VERSION=$(./gradlew -q printVersion)
          PROJECT_NAME=$(./gradlew -q printProjectName)
          IMAGE_TAG="$PROJECT_NAME:v$VERSION$SUFFIX"
          docker build --file Dockerfile --build-arg SKIP_TESTS=true --tag $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_HUB_CLIENT_NAME: in2workspace
          SUFFIX: -rc1
  release-prod:
    name: release-prod
    runs-on: ubuntu-latest
    needs:
      - build
      - release-test
    if: success()
    environment: prod
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew
      - name: Build and Push docker image
        run: |
          ./gradlew printVersion
          ./gradlew printProjectName
          VERSION=$(./gradlew -q printVersion)
          PROJECT_NAME=$(./gradlew -q printProjectName)
          IMAGE_TAG="$PROJECT_NAME:v$VERSION$SUFFIX"
          docker build --file Dockerfile --build-arg SKIP_TESTS=true --tag $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
          DOCKER_HUB_CLIENT_NAME: in2workspace
          SUFFIX: -ga
